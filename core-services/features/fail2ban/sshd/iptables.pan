unique template features/fail2ban/sshd/iptables;

# Add basic set of iptables rules (component is included in this template)
# Default policy is to DROP all incoming packets that do not come from an IP
# address within example.net
# This is included here in case the 'fail2ban/sshd' feature is compiled before
# 'core/iptables' feature and because we are extending the iptables ruleset in
# this feature
include 'common/core/iptables';

# For a public-facing SSHD server, we need to allow general access via port 22
# but we also need to block access from IP addresses and ranges that are used
# in repeated attempts to login

# Jump to a new chain of statically configured filter rules to block unwanted
# access from given IP addresses by dropping incoming packets from those
# addresses and ranges on port 22, this chain is STAT-SSHD
prefix '/software/components/iptables';
'filter/rules' = append(SELF, dict(
    'command', '-A',
    'chain', 'INPUT',
    'protocol', 'tcp',
    'match', 'multiport',
    'dst_ports', '22',
    'jump', 'STAT-SSHD',
));

# Initialise a list of IP addresses and ranges for rule generation and the
# IP addresses and ranges to ban
include 'features/fail2ban/sshd/banned-ip-sources';
variable ip_sources = list();
variable ip_sources = merge(SELF, BANNED_SSHD_IPS);

# Define defaults for the filter rules: DROP incoming packets
variable rule_defaults = dict(
    'command', '-A',
    'chain', 'STAT-SSHD',
    'jump', 'DROP',
);

# Generate the filter rules
variable ip_tables_rules ?= list();
variable ip_tables_rules = {
    rules = list();
    foreach (k; v; ip_sources) {
        rules = append(rules, merge(rule_defaults, dict('source', v)));
    };
    rules;
};

# Merge the filter rules with any existing rules
'filter/rules' = merge(SELF, ip_tables_rules);

# Return to the INPUT chain from the STAT-SSHD chain
'filter/rules' = append(SELF, dict(
    'command', '-A',
    'chain', 'STAT-SSHD',
    'jump', 'RETURN',
));

# Now jump to a new chain of dynamically configured filter rules generated by
# fail2ban, this chain is F2B-SSHD
'filter/rules' = append(SELF, dict(
    'command', '-A',
    'chain', 'INPUT',
    'protocol', 'tcp',
    'match', 'multiport',
    'dst_ports', '22',
    'jump', 'F2B-SSHD',
));

# Return to the INPUT chain from the F2B-SSHD chain
'filter/rules' = append(SELF, dict(
    'command', '-A',
    'chain', 'F2B-SSHD',
    'jump', 'RETURN',
));

# Finally, ACCEPT incoming packets on port 22 that did not match any of the
# rules defined here or by fail2ban
'filter/rules' = append(SELF, dict(
    'command', '-A',
    'chain', 'INPUT',
    'protocol', 'tcp',
    'match', 'multiport',
    'dst_ports', '22',
    'jump', 'ACCEPT',
));
